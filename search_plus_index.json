{"./":{"url":"./","title":"概览","keywords":"","body":" [!TIP|style:flat|icon:'fa fa-info-circle'|labelVisibility:hidden|iconVisibility:hidden] RocGames 开发者服务 ( RocGames Developer Services ) 简称 RDS 服务 旨在帮助开发者降低游戏研发、运营维护等阶段投入的精力和成本。 RDS 整合了各项服务，让开发者能够聚焦在游戏核心乐趣的创造上，创作更优秀的游戏，进而促进游戏行业生态的良性循环，最终让开发者与玩家双双受益。 服务列表 [!WARNING|label:Tips] RDS 提供以下服务，开发者可以通过在游戏中集成 SDK 来开启使用： 登录：玩家可以通过 RDS 授权快速开始游戏。帮助开发者低成本地构建一个安全可靠的玩家登录系统，支持玩家采用包括游客账号、第三方账号（Yeeha、Apple、微信、QQ 等）在内的多种账号来登录你的游戏。 支付：提供主流支付方式，玩家可以通过 RDS 授权快速完成游戏内道具购买与流通。 好友：玩家通过 RDS 账号登录后，可以获取玩同一款游戏的 RDS 互关好友列表。为游戏开发者提供完整的添加、删除、查找好友的功能接口，帮助游戏快速形成社交网络。 成就：可以在游戏中设置「普通成就」和「白金成就」，增加玩家在游戏中的参与度，鼓励玩家以不同的玩法来玩游戏。 排行：基于内建账户系统在游戏中设立排行榜功能，可以推动玩家之间的趣味性竞争，从而帮助提升游戏的玩家活跃度。 实时语音：一站式语音解决方案，提供实时语音、语音合规服务，覆盖 FPS、MOBA、MMORPG、休闲对战、线上桌游等多种游戏玩法类型。 即时通讯：解决产品内即时通信、实时数据同步等需求。 推送通知：整合了 Android 推送、iOS 推送的统一推送服务。 公告系统：开发者在开发者中心发布编辑公告内容，玩家在打开游戏时可以收到公告通知。 数据分析：提供了一套专注于解决游戏项目数据需求的分析工具，通过简单的接入就可以获得丰富实用的数据看板和广告追踪能力，让数据分析和广告投放变得轻松易操作，同时也可以用于分析人群画像，帮助开发者更好地理解用户。 [!DANGER|label:声明] RDS 提供的服务均不可用于所在地区法律以外的目的 [!NOTE|style:flat|icon:'fa fa-info-circle'|labelVisibility:hidden|iconVisibility:hidden] 使用对应的服务请先完成开发者注册，之后登录开发者中心开启「游戏服务」。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/get-ready.html":{"url":"started/get-ready.html","title":"准备工作","keywords":"","body":" [!NOTE|labelVisibility:hidden|iconVisibility:hidden] 为了能使用 RocGames （ RocGames Developer Services，简称 RDS 服务 ），你需要完成前期的配置工作。 创建应用 [!WARNING|label:暂不支持在线开通游戏服务] 在使用 RDS 服务之前，你需要创建一个应用，来完成对接前的准备工作。 创建应用请联系相关 商务 与 运营人员。 配置应用 依次进入 开发者中心 > 你的游戏 > 游戏服务 > 应用配置，点击「立即开启」，获得当前应用的基本信息。 基本信息 Client ID 是一个应用实体包在 RocGames 开发者中心的唯一身份标识， RocGames 通过 Client ID 来鉴别应用的身份。每个应用仅能拥有一个 Client ID，如同一个应用区分测试服与正式服，需要创建两个不同的应用，分别开启应用配置。 适用地区 一个 client 仅能对应一个地区。这是由于在 RocGames 的账号系统内，将中国大陆用户与全球用户做了隔离区分，互不相通。 配置域名 使用 RDS 提供的云服务需要绑定 API 自定义域名，以便和其他厂商的应用隔离入口，避免其他应用受到 DDoS 攻击时相互牵连。 如果使用了数据存储中的文件服务，包括即时通讯的多媒体消息（图像、音频、视频等），需要绑定文件访问域名。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/quickstart-and.html":{"url":"started/quickstart-and.html","title":"Android SDK","keywords":"","body":" [!NOTE|style:flat|labelVisibility:hidden|iconVisibility:hidden] 本文介绍如何快速接入 Android SDK 并实现 登录 功能。 页面提供了 Android 示例项目，可供参考。 (一)创建应用 请登录 开发者中心 注册为开发者并创建应用。 (二)环境要求 Unity 2019.4 或更高版本 Android 5.0（API level 21）或更高版本 (三)项目配置 [!DANGER|label:特别注意] aab包体需要控制在150M之内 参考官方文档https://developer.android.com/guide/app-bundle/asset-delivery?authuser=1 1. 获取必要参数 参数 说明 gameId 游戏ID appkey 游戏加密密钥 channelId 渠道 ID，目前固定为“GP” 2. 引入Android studio 依赖 1）在工程的根目录gradle中加入maven仓库的引用地址 buildscript { repositories { google() jcenter() mavenCentral() } dependencies { classpath 'com.android.tools.build:gradle:4.2.0' // 最低4.1.0，不然可能会编译错误 classpath 'com.google.gms:google-services:4.3.13' // google-services plugin 最低4.2.0，不然可能会编译错误 // Add the Crashlytics Gradle plugin classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.0' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { google() jcenter() mavenCentral() maven{ url 'https://raw.githubusercontent.com/Haimianbaby/MySdkSecond/master' } maven { url \"https://jitpack.io\" } } } 2）在工程的app gradle dependencies中加入aar引用并加上google配置 在最顶部加入 apply plugin: 'com.google.gms.google-services' // Apply the Crashlytics Gradle plugin 这个一定要加在com.google.gms.google-services之后 apply plugin: 'com.google.firebase.crashlytics' 在依赖中加入 implementation 'com.myLegend.secondsdk:mySecondSdkaar:2.4.8' 3）必须拷贝assets里的配置文件 sdk_config文件中配置正式域名和测试域名， adjust_config.xml 文件中配置adjust事件token 4）开启Androidx插件 在gradle.properties中添加下面的代码 // Android 插件会使用对应的 AndroidX 库而非支持库。 android.useAndroidX=true // Android 插件会通过重写现有第三方库的二进制文件，自动将这些库迁移为使用 AndroidX，但并不完全自动。 android.enableJetifier=true 然后在项目build.gradle里添加 android { ... ... compileOptions { sourceCompatibility 1.8 targetCompatibility 1.8 } configurations { all { exclude module: 'httpclient' exclude module: 'commons-logging' } } .... .... } 3. 配置AndroidManifest.xml 1）在工程 AndroidManifest.xml 加入以下权限 2）AndroidManifest.xml 配置 // 为了适配targetSdkVersion 28,需要加入以下配置，不加入可能会无法使用http链接 在application标签下加上 android:networkSecurityConfig=\"@xml/network_security_config\" 9.0 不再支持http 需要配置如下 以及加上 xml/network_security_config 在 节点下加入，注意不要加在节点下，用于查找是否安装Facebook app .... 其他配置 Facebook所需要配置的参数 strings.xml里 特别注意修改： 自己的Facebook id fb自己的Facebook id Facebook token参数 Google 登录id 至此所需的sdk前置配置都已完成，可以进行下一步sdk的接入了 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/quickstart-ios.html":{"url":"started/quickstart-ios.html","title":"IOS SDK","keywords":"","body":" [!NOTE|style:flat|labelVisibility:hidden|iconVisibility:hidden] 本文介绍如何快速接入 IOS SDK 并实现 登录 功能。 页面提供了 iOS示例项目，可供参考。 (一)环境要求 iOS 11.0 或更高版本 (二)项目配置 [!DANGER|label:特别注意] 请使用cocoapods集成管理三方库，以防止两边有共用三方库引起冲突 一、将SDK集成到Xcode工程中 1.0 把iOSSDK文件夹下的 framework + source.bundle 添加到工程中 1.1 工程添加google配置文件和Plist文件同级目录下 如下所示: 2. 工程配置 2.0 target => general 2.1 target => Signing & Capabilities applinks:其值请查看参数表 2.2 推送配置 2.3 添加framework AdSupport.framework iAd.framework AdServices.framework CoreTelephony.framework StoreKit.framework AppTrackingTransparency.framework SafariServices.framework其中 AppTrackingTransparency.framework、AdServices.framework 注意修改Status: Optional 如下: 2.4 target => Build Settings 添加:-ObjC(O和C大写) 2.5 target => Build Settings bitcode 设置为:NO 3. info.plist文件配置 3.1 添加如下code CFBundleURLTypes CFBundleTypeRole Editor CFBundleURLSchemes ⚠️#可查看参数表#⚠️ FacebookAppID ⚠️#可查看参数表#⚠️ FacebookClientToken ⚠️#可查看参数表#⚠️ FacebookDisplayName ⚠️#可查看参数表#⚠️ LSApplicationQueriesSchemes fbapi fbapi20130214 fbapi20130410 fbapi20130702 fbapi20131010 fbapi20131219 fbapi20140410 fbapi20140116 fbapi20150313 fbapi20150629 fbapi20160328 fbauth fb-messenger-share-api fbauth2 fbshareextension 3.2 添加如下标签 3.3 value改为应用名 ￼ 3.4 添加隐私标签 ⚠️语言国际化可参考隐私本地化表 ￼ 3.5 添加广告追踪标签 ⚠️语言国际化可参考隐私本地化表 ￼ 4. 使用cocoaPods集成其它三方库到工程中 source 'https://github.com/CocoaPods/Specs.git' platform:ios, ’11.0’ inhibit_all_warnings! use_frameworks! target '⚠️#工程主target#⚠️' do pod 'FBSDKCoreKit', '~> 14.1.0' pod 'FBSDKLoginKit', '~> 14.1.0' pod 'FBSDKShareKit', '~> 14.1.0' pod 'Firebase/Analytics' pod 'Firebase/Crashlytics' pod 'FirebaseMessaging' pod 'YYModel', '~> 1.0.4' pod 'Adjust', '~> 4.32.0' end Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/publish.html":{"url":"started/publish.html","title":"运维验收","keywords":"","body":"验收流程 1. 服务器架构及说明 2. 单区服PCU，注册上限数据 3. 服务器资源 [ ] 测试服 [ ] 审核服 [ ] 正式服 [ ] CDN & 源站 [ ] 各类数据库 4. BI数据收集及同步 [ ] 业务数据库 [ ] 日志数据 5. 数据库备份方案 6. 容灾方案 7. 重点关注项目，会影响整体的服务，如serverlist versioncheck 运营数据 推广/ 刷榜时间点 (大量用户进入时间点） 首周/首月预估服务器注册总人数，PCU 首周，首月开服数 特别注意： 确保没有IP写死进包体 每个项目资源独立，不要混用 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/test.html":{"url":"started/test.html","title":"测试验收","keywords":"","body":"测试用户管理 测试用户管理功能是用于 登录、正版验证 、快速认证（防沉迷）等相关服务的测试用户名单管理。 在全量开放前，仅测试用户可提前进入游戏测试相关游戏服务，未添加到测试用户管理的人员登录后会遇到「抱歉，该游戏 / 应用暂未开放」提醒，无法进入游戏。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/yunying.html":{"url":"started/yunying.html","title":"运营验收","keywords":"","body":"TTTTT用户管理 测试用户管理功能是用于 登录、正版验证 、快速认证（防沉迷）等相关服务的测试用户名单管理。 在全量开放前，仅测试用户可提前进入游戏测试相关游戏服务，未添加到测试用户管理的人员登录后会遇到「抱歉，该游戏 / 应用暂未开放」提醒，无法进入游戏。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"started/agreement.html":{"url":"started/agreement.html","title":"隐私政策","keywords":"","body":"隐私政策 本隐私政策旨在向开发者及其终端用户说明我们收集个人信息的类型及我们如何处理和保护个人信息。在注册、接入、使用 SDK 产品和/或服务前，请开发者务必仔细阅读本隐私政策，在确认充分了解并同意后再接入并使用，如果开发者不同意本隐私政策，应立即停止接入及使用 SDK 产品和/或服务。 本隐私政策不适用于接入并使用 SDK 产品和/或服务的开发者在其 App 中处理由其所控制的终端用户个人信息的行为，也不适用于展示在、链接到或再封装我们的产品和/或服务的那些适用第三方隐私政策、并由第三方提供的服务。我们建议终端用户在认真阅读、充分了解并同意 App/相关第三方的隐私政策后，再使用相应的产品/服务。 为了便于开发者及终端用户阅读及理解，我们对关键术语进行了定义，请参见本隐私政策“附录：关键术语定义”。 特别说明： 如果开发者在其 App 中接入并使用 SDK 产品和/或服务，请开发者知悉并承诺： （1）开发者已经遵守并将持续遵守适用的法律、法规、政策和监管要求收集、使用和处理终端用户的个人信息，保护个人信息安全。 （2）开发者已经告知终端用户在其 App 中接入并使用 SDK 产品和/或服务的情况，以及 SDK 对终端用户必要个人信息的收集、使用和保护规则（即本隐私政策），并且已经获得终端用户对于 SDK 收集、使用、处理其个人信息充分、必要且明确的授权同意（包括获取了儿童监护人对提供终端用户是儿童的个人信息的授权同意）。 （3）开发者已经向终端用户提供了易于操作的用户权利实现机制（包括但不限于访问、更正、删除其个人信息，撤销或更改其授权同意范围，注销其个人账号等）。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/login/overview.html":{"url":"core/login/overview.html","title":"功能介绍","keywords":"","body":"业务介绍 [!TIP|label:Tips] 为了访问 RocGmaes Developer Services（以下简称 RDS）的相关服务功能，你的用户需要拥有一个 RDS 账号。 如果用户未使用 RDS 账号，你的应用在调用 RDS 服务 API 时可能会遇到错误。本文档介绍了如何在你的应用中实现 RDS 登录。 RDS 账号服务是基于标准的 OAuth 2.0 协议构建的授权登录系统，为开发者提供了简单、安全、快速的账号登录授权功能，为用户免去输入账号密码的繁琐步骤，让用户只需一键通过 RDS 账号授权，即可使用你的应用。 在取得用户授权之后，开发者可以通过接口调用的方式获得 RDS 用户的相关公开信息，包括用户昵称、头像等，可用于提高应用的用户体验。 前期工作 请确认已经在 开发者中心 > 应用配置 完成了开启操作。可参照入门指南中的准备工作。 功能接入 接入 RDS 登录有两种方式： 基于内建账户系统接入 RDS 登录； 单纯 RDS 用户认证。 第一种方式是我们推荐的方式，一般适用于以下场景： 希望直接使用 SDK 提供的账户系统 希望将更多第三方账号（比如 QQ、微信、Apple 等）绑定到玩家账号上 希望使用 SDK 的好友、成就等基于内建账户系统的服务和功能 相反，如果你的游戏自己实现了账户系统，也不打算使用好友、成就等 SDK 提供的其他功能，仅仅需要接入「用户登录」功能，那么可以考虑使用第二种方式。 我们首先介绍第一种方式，然后介绍第二种方式。 无论使用哪种方式，首先都需要在 开发者中心 > 游戏服务 > 功能接入 开启「登录」。 1.SDK 获取及初始化 参考 快速开始 创建应用、完成 项目配置 和 初始化。 2.检查登录状态 SDK 会在本地缓存当前用户的登录信息，所以如果一个玩家在游戏内登录之后，下次启动用户通过调用如下方法可以得到之前登录的账户实例。 缓存不会自动清除。此时玩家无需再次登录，可以直接进入游戏，实现静默登录。 如果玩家在游戏内进行了登出或者玩家手动清除了游戏的存储数据，则本地缓存的登录信息也会被删除，下次进入游戏时调用如下方法会返回一个 null 对象，玩家需要登录之后再进入游戏。 3.静默登录 静默登录可以帮助用户跳过登录的流程，通常用于用户下一次启动游戏时，仍需之前登录状态的场景。 当用户启动游戏时，你可以尝试检查用户是否已经在当前设备上登录、登录信息是否仍有效。 使用内建账户方式，参考检查登录状态。 使用单纯 RDS 登录，参考检查登录状态和用户信息。 这样可以尝试在不显示登录按钮或界面的情况下帮用户完成登录过程。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/login/access-and.html":{"url":"core/login/access-and.html","title":"Android","keywords":"","body":"集成SDK功能 MyExternalInterface.getInstance().isStartLog(true);//TAG: mySDK 在启动activity里oncreate加上,可以开启日志调试，正式上线包需要改成false 1.在自己的Application onCreate里调用 MyExternalInterface.getInstance().APPInit(Application application,boolean isProduction); 参数：isProduction：传入运行的环境 true 表示正式环境 production false 表示测试环境sandbox 注意：正式上线包一定要把环境改成true 2. 初始化SDK 接口定义： public void SDKInit(Activity activity,String gameId,String appkey,String channelId,SDKInterfaceInitListener initListener) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 gameId String 游戏ID appkey String 游戏加密密钥 channelId String 渠道 ID，目前固定为“GP” initListener SDKInterfaceInitListener 初始化回调接口 2. 调用示例代码 MyExternalInterface.getInstance().SDKInit(MainActivity.this, GAMEID, SIGN_KEY, CHANNELID, new SDKInterfaceInitListener() { @Override public void initSuccess(String result) { Log.d(TAG, \"SDKInitsuccese-result====\" + result); if(result.equals(\"true\")){ //同意了协议直接登录 login(); }else{ //没有同意协议调用协议界面 MyExternalInterface.getInstance().SDKProtocol(MainActivity.this, new BaseListener() { @Override public void onSuccess(int code, String msg) { //同意协议 login(); } @Override public void onFail(int code, String msg) { Log.d(TAG,\"不同意协议 code=\"+code); } }); } } @Override public void initFail(String result) { Log.d(TAG, \"SDKInitfail-result====\" + result); } }); 3. 登录 接口定义： public void SDKLogin(Activity activity,SDKLoginListener listener) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 listener SDKLoginListener 登录的回调 2. 接口回调说明 登录成功回调 public void onSuccess(int code, SdkLogincallBack sdkLogincallBack) sdkLogincallBack中会得到登录验证时所需要的参数 参数名 类型 参数说明 gameSign string 登录成功后，得到的加密字符串 loginTime string 用户登录的时间 uid String 用户的uid subId String Market平台子账号subId（唯一） mainId String Market平台id（可能为空） token string 主平台token username String 用户名 loginWay String 登录的方式 1:游客登录 2:Fb登录 3:账号密码登录 4:Twitter登陆 5：自动登录 6：Google登录 fbBind String 0表示没有绑定，1表示绑定了 twitterBind String 0表示没有绑定，1表示绑定了 3. 调用示例代码 MyExternalInterface.getInstance().SDKLogin(MainActivity.this, new SDKLoginListener() { @Override public void onSuccess(int code, SdkLogincallBack sdkLogincallBack) { String gameSign = sdkLogincallBack.gameSign; String loginTime = sdkLogincallBack.loginTime; String uid = sdkLogincallBack.uid; String username = sdkLogincallBack.username; String loginWay = sdkLogincallBack.loginWay; String fbBind = sdkLogincallBack.fbBind; String twitterBind = sdkLogincallBack.twitterBind; String subId = sdkLogincallBack.subId; String mainId = sdkLogincallBack.mainId; String token = sdkLogincallBack.token; Log.d(TAG, \"gameSign==\" + gameSign + \"\\nloginTime==\" + loginTime + \"\\nuid==\" + uid + \"\\nusername==\" + username + \"\\nloginWay==\" + loginWay + \"\\nfbBind==\" + fbBind + \"\\ntwitterBind==\" + twitterBind+ \"\\nsubId==\" + subId+ \"\\nmainId==\" + mainId + \"\\ntoken==\" + token); } @Override public void onFail(int code, String msg) { Log.d(TAG, \"code==\" + code + \"\\nmsg==\" + msg); } }); 4. 实现onActivityResult 方法 @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { MyExternalInterface.getInstance().onActivityResult(MainActivity.this, requestCode, resultCode, data, new BaseListener() { @Override public void onSuccess(int code, String msg) { } @Override public void onFail(int code, String msg) { } }); } 3.账号管理界面 接口定义： public void SDKAccountManage(Activity activity, SDKInterfaceExitListener exitListener) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 listener SDKInterfaceExitListener 切换账号的回调 2. 调用示例代码 MyExternalInterface.getInstance().SDKAccountManage(this, new SDKInterfaceExitListener() { @Override public void exitSuccess(String result) { //点了切换账号确定接口，游戏需要返回登录界面，再次调用sdk登录 BaseSDKUtils.logD(TAG,\"exitSuccess====\"+result); sdkLogin(); } @Override public void exitFail(String result) { } }); 4.生命周期方法 1. 调用示例代码 在Activity的onStart里调用 MyExternalInterface.getInstance().onStart(MainActivity.this, \"\"); 在Activity的onStop里调用 MyExternalInterface.getInstance().onStop (MainActivity.this, \"\"); 在activity的onDestroy里调用 MyExternalInterface.getInstance().onDestroy(MainActivity.this); 5.分享功能 Android 11,需要在 AndroidMainfest.xml 加上下面内容，不然可能会分享不了图片: ... 1.Facebook分享链接 接口定义： public void SDKFacebookShare(Activity activity, ShareInfo shareInfo, SDKInterfaceShareListener callback) a.接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 shareInfo ShareInfo 分享的信息对象 callback SDKInterfaceShareListener 分享的回调 ShareInfo对象说明 参数名 类型 参数说明 andLink String 分享的链接 dsp String 分享的描述信息 uid String 用户uid serverId String 服务器id roleId String 游戏内的角色id shareId String 分享点所在位置id（具体值具体定义） b.分享回调说明 msg = \"0\"; 为分享成功状态，回调shareSuccess msg = \"1\", 为分享失败状态, 回调shareFail msg =\"2\";为分享取消状态，回调shareFail msg =\"3\";为用户没有安装Facebook app，回调shareFail c.调用示例代码 ShareInfo shareInfo = new ShareInfo(); shareInfo.andLink = \"https://www.baidu.com\"; shareInfo.dsp = \"测试分享\"; shareInfo.uid = \"10000\"; shareInfo.serverId = \"1\"; shareInfo.roleId = \"123\"; shareInfo.shareId = \"maipage\"; MyExternalInterface.getInstance().SDKFacebookShare(this, shareInfo, new SDKInterfaceShareListener() { @Override public void shareSuccess(String s) { Log.d(TAG, \"s==\" + s); } @Override public void shareFail(String s) { Log.d(TAG, \"s==\" + s); } }); 2.Facebook分享本地视频 接口定义： public void SDKFacebookShareVideo (Activity activity, ShareInfo shareInfo,File videoFile, SDKInterfaceShareListener callback) 参数：File videoFile 传入本地视频的File目录 UpdateInfo同上说明 a.调用示例代码 File dir = this.getExternalFilesDir(\"video\"); File loadingvideo = new File(dir, \"shareVideo.mp4\"); ShareInfo shareInfo = new ShareInfo(); shareInfo.uid = \"10000\"; shareInfo.serverId = \"1\"; shareInfo.roleId = \"123\"; shareInfo.shareId = \"maipage\"; MyExternalInterface.getInstance().SDKFacebookShareVideo (this,shareInfo,loadingvideo,new SDKInterfaceShareListener(){ @Override public void shareSuccess(String s) { Log.d(TAG, \"s==\" + s); } @Override public void shareFail(String s) { Log.d(TAG, \"s==\" + s); } }); 3.Facebook分享图片 用户必须安装 7.0 或更高版本的原生 Android 版 Facebook 应用才能分享。 接口定义： public void SDKFacebookSharePicture (Activity activity, ShareInfo shareInfo, Bitmap imageBitmap, SDKInterfaceShareListener callback) 参数：Bitmap imageBitmap 传入图片的bitmap UpdateInfo同上说明 a.调用示例代码 File dir = this.getExternalFilesDir(\"picture\"); File sharePicture = new File(dir, \"sharePicture.png\"); Uri uri = Uri.fromFile(sharePicture); Bitmap bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), uri); ShareInfo shareInfo = new ShareInfo(); shareInfo.uid = \"10000\"; shareInfo.serverId = \"1\"; shareInfo.roleId = \"123\"; shareInfo.shareId = \"maipage\"; MyExternalInterface.getInstance().SDKFacebookSharePicture (this,shareInfo, bitmap,new SDKInterfaceShareListener(){ @Override public void shareSuccess(String s) { Log.d(TAG, \"s==\" + s); } @Override public void shareFail(String s) { Log.d(TAG, \"s==\" + s); } }); 6.Firebase推送 1.在Firebase创建的应用下载json文件 在AndroidManifest.xml 的application节点下加入 2.在 Android 13+ 上请求运行时通知权限 Android 13 引入了用于显示通知的新运行时权限。这会影响在 Android 13 或更高版本上运行且使用 FCM 通知的所有应用。 默认情况下，FCM SDK（23.0.6 或更高版本）包含清单中定义的POST_NOTIFICATIONS权限。但是，您的应用还需要通过常量android.permission.POST_NOTIFICATIONS请求此权限的运行时版本。在用户授予此权限之前，您的应用将无法显示通知。 在请求权限的方法中判断Android版本13+以上加上请求通知的权限 Manifest.permission.POST_NOTIFICATIONS // This is only necessary for API level >= 33 (TIRAMISU) if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) 7.配置Google登录 拷贝credentials.json文件放在同样的目录位置 和Facebook配置一样，具体值写在string.xml里 8.关于混淆 如果开启了混淆 minifyEnabled 是true，则需要在proguard-rules加入以下代码 #---------------------------------MySDK--------------------------------- -keepclassmembers class com.myBest.sdk.utils.JsInterationUtils { ; } -dontwarn com.facebook.** -keep class com.facebook.** { *; } -dontwarn com.google.** -keep class com.google.** { *; } #okhttp3.x -dontwarn okhttp3.** -keep class okhttp3.** { *;} -dontwarn okio.** #retrofit -dontwarn retrofit.** -keep class retrofit.** { *; } -keepattributes Signature -keepattributes Exceptions -dontwarn okio.** #retrofit2.x -dontwarn retrofit2.** -keep class retrofit2.** { *; } -keepattributes Signature -keepattributes Exceptions #--------------------------Adjust------------------------------- -keep public class com.adjust.sdk.** { *; } -keep class com.google.android.gms.common.ConnectionResult { int SUCCESS; } -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient { com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context); } -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info { java.lang.String getId(); boolean isLimitAdTrackingEnabled(); } -keep class dalvik.system.VMRuntime { java.lang.String getRuntime(); } -keep class android.os.Build { java.lang.String[] SUPPORTED_ABIS; java.lang.String CPU_ABI; } -keep class android.content.res.Configuration { android.os.LocaleList getLocales(); java.util.Locale locale; } -keep class android.os.LocaledList { java.util.Locale get(int); } -keep public class com.android.installreferrer.** { *; } #--------------------------Adjust------------------------------- ################### region for xUtils -keepattributes Signature,*Annotation* -keep public class org.xutils.** { public protected *; } -keep public interface org.xutils.** { public protected *; } -keepclassmembers class * extends org.xutils.** { public protected *; } -keepclassmembers @org.xutils.db.annotation.* class * {*;} -keepclassmembers @org.xutils.http.annotation.* class * {*;} -keepclassmembers class * { @org.xutils.view.annotation.Event ; } #################### end region ##---------------Gson ---------- # Gson uses generic type information stored in a class file when working with fields. Proguard # removes such information by default, so configure it to keep all of it. -keepattributes Signature # For using GSON @Expose annotation -keepattributes *Annotation* # Gson specific classes -keep class sun.misc.Unsafe { *; } #-keep class com.google.gson.stream.** { *; } ##---------------Gson ---------- # Application classes that will be serialized/deserialized over Gson #---------------------------------实体类--------------------------------- -keep class com.myBest.sdk.Javabean.** { *; } -keep class com.myBest.sdk.Interfaces.** { *; } -keep class com.myBest.sdk.listener.** { *; } -keep class com.android.vending.billing.** { *; } -keep class com.myBest.sdk.helpers.MyInputMapProvider{ *; } #---------------------------------MySDK--------------------------------- Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/login/access-ios.html":{"url":"core/login/access-ios.html","title":"IOS","keywords":"","body":"iOS登录 SDK支持多种登录方式 游客登录 苹果登录 Facebook登录 Yeeha平台邮箱登录 登录实现 1. SDK初始化 1.0 在 - (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(nullable NSDictionary )launchOptions 方法中初始化SDK 参数 类型 说明 isProduction bool 线上为 YES , 测试为NO, ⚠️提审时需设置为YES - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // Override point for customization after application launch. [[ROCSdkManager manager] initConfig:isProduction application:application launchOptions:launchOptions]; return YES; } 1.1 在 - (BOOL)application:(UIApplication )app openURL:(NSURL )url options:(NSDictionary *)options 方法中实现SDK对应方法 - (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options API_AVAILABLE(ios(9.0)){ BOOL log = [[ROCSdkManager manager] application:app openURL:url options:options]; return log; } 2. 登录模块 2.1 展示登录界面 界面中含有登录、注册、忘记密码功能。 账号的切换、注销请参考 3. 账号管理模块 [ROCSdkManager showLogin]; 2.2 登录事件回调 登录失败 SDK 已做提示功能, 无需再做处理 返回键值对对象dic，包含字段如下: | 参数 | 类型 | 说明 | | :-- | :---: | :-- | | username | 字符串 | 账号username | | uid | 字符串 | 账号uid | | subId | 字符串 | Yeeha平台子账号ID | | mainId | 字符串 | Yeeha平台ID | | gameSign | 字符串 | 登录验证用 | | loginTime | 字符串 | 登录验证用 | | token | 字符串 | 登录验证用 | | channel | 字符串 | 支付时会用到 用户来源:如iOS、安卓等 | | loginWay | 字符串 | 登录方式 0:apple登录 1:游客登录 2:Fb登录 3:账号密码登录 | | fbBind | 字符串 | 0:未绑定 1:已绑定 | | twitterBind | 字符串 | 0:未绑定 1:已绑定 |[ROCSdkManager manager].loginSuccessBlock = ^(NSDictionary * _Nonnull dic) { NSLog(@\"登录成功:%@\",dic); }; 2.3 登录界面移除 登录成功SDK会自动移除界面，所以通常用不到这个接口 [ROCSdkManager removeLoginVC]; 3. 账号管理模块 3.1 展示账号管理界面 界面中含有修改密码、绑定邮箱、绑定Facebook、账号的切换和注销功能 [ROCSdkManager showAcc]; 3.2 事件回调 3.2.1 切换账号回调 玩家已确认切换账号，需要对接方实现游戏的初始化工作，初始化到刚启动应用时的状态 玩家删除账号也走该回调，不需要额外处理逻辑，同切换账号一套处理代码即可[ROCSdkManager manager].changeAccBlock = ^{ NSLog(@\"确认了要切换账号\"); }; 3.2.2 关闭账号管理界面回调 玩家关闭了账号管理界面，通常用不到这个回调 [ROCSdkManager manager].changeAccBlock = ^{ NSLog(@\"确认了要切换账号\"); }; Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/login/simple-login.html":{"url":"core/login/simple-login.html","title":"简单登录","keywords":"","body":"简单认证 如果你仅仅只需要接入这一种登录方式，确认不使用 RDS 其他云服务，可以看这里的文档。请注意，如果刚开始只选择接入「 登录」，后面又需要使用其他云服务的话，后期可能有一定的升级成本。 使用原来 SDK v1.x 版本的开发者，也可以参考这里的说明来完成 SDK 的升级。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/login/best-practice.html":{"url":"core/login/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 登录流程 玩家在登录时，操作的步骤越少，路径越短，则转化率越高。建议使用相对简短的引导，保留必要的步骤，让玩家能快速进入游戏。 登录界面 为玩家提供 登录按钮 ，按照登录设计指南绘制，并参考功能介绍 中单个登录与多个登录的展现方式。 Checklist 向玩家提供登录功能前，开发者需要测试登录流程是否正常完成，检查以下事项： 游戏是否达到 SDK 环境要求。 开发者是否了解 SDK 中两种 登录方式，并选择了适合游戏的一种。参考接入 登录。 是否在 开发者后台填写了 Android 平台或 iOS 平台相关配置。参考配置签名证书和格式要求。 测试用户是否具备相关权限。参考测试用户管理。 在未安装 客户端的设备上打开游戏，是否能以 WebView 方式完成登录流程，是否能获取玩家授权的基本信息。 在安装了最新版 客户端的设备上打开游戏，是否能拉起 客户端完成登录流程，是否能获取玩家授权的基本信息。 登录授权完成后，退出游戏再次进入，是否可以静默登录。 登录授权未完成就退出游戏，或者点了取消，再次进入游戏，是否能重新开始登录流程。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/pay/overview.html":{"url":"core/pay/overview.html","title":"功能介绍","keywords":"","body":"支付功能介绍 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/pay/access-and.html":{"url":"core/pay/access-and.html","title":"Android","keywords":"","body":"Google应用内充值 接口定义： public void SDKPay(Activity activity, SdkPayInfo sdkPayInfo,String paySource) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 sdkPayInfo SdkPayInfo 充值的信息对象 paySource String 充值渠道，Google为“GP” SdkPayInfo对象说明 参数名 类型 参数说明 productId String 充值的商品id，与google后台配置的一致 serverId String 充值的区服号 uid String 充值的用户uid shopId String 充值的内部商品id，自己游戏内部用的id roleId String 游戏内的角色id level String 角色等级 amount String 充值的金额（货币单位：美金） extra String 额外的参数(可选，数据会原样返回给服务端) 2. 调用示例代码 public String PAYSOURCEID = \"GP\";//Google支付为GP SdkPayInfo sdkPayInfo = new SdkPayInfo(); sdkPayInfo.productId = \"diamonds0.99\"; sdkPayInfo.serverId = \"1\"; sdkPayInfo.uid = \"10000\"; sdkPayInfo.shopId = \"301\"; sdkPayInfo.roleId = \"123\"; sdkPayInfo.level = \"5\"; sdkPayInfo.amount = \"0.99\"; sdkPayInfo.extra=\"123\"; MyExternalInterface.getInstance().SDKPay(this, sdkPayInfo,PAYSOURCEID); Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/pay/access-ios.html":{"url":"core/pay/access-ios.html","title":"IOS","keywords":"","body":"iOS 支付 apple内购支付 1. 支付拉起 请先初始化 SDK 可参考 access-ios SDK已做订单单比化(一单结束才能进行下一单)，无需再做遮罩层。 已做客户端自动补单功能，掉单后且没有提示发货相关的错误提示时(如:发货失败、重复的订单等)，可重启应用进行自动补单。 接口对象包含字段说明: 参数 类型 说明 productId 字符串 传苹果内购ID serverid 字符串 游戏区服ID 没有就传字符串@\"1\"） amount 字符串 订单金额 (⚠️传 美金) uid 字符串 登陆成功时返回的UID shopid 字符串 游戏方自己的商品ID roleid 字符串 游戏角色ID extension 字符串 透传参数，会原样返回给你们（没有就传字符串@\"\"） 调用示例如下: [ROCSdkManager pay:@{@\"productId\":@\"com.game.brast.iap.tier4\", @\"serverid\":@\"1299999\", @\"amount\":@\"3.99\", @\"uid\":@\"1000090\", @\"shopid\":@\"104\", @\"roleid\":@\"1000025\", @\"extension\":@\"ff2e71064fde4f588c127f215df0aabb\", }]; Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/pay/simple-pay.html":{"url":"core/pay/simple-pay.html","title":"简单支付","keywords":"","body":"支付 readme Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/pay/best-practice.html":{"url":"core/pay/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 支付流程 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/notice/overview.html":{"url":"core/notice/overview.html","title":"功能介绍","keywords":"","body":"公告功能介绍 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/notice/access-and.html":{"url":"core/notice/access-and.html","title":"Android","keywords":"","body":"集成SDK功能 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/notice/access-ios.html":{"url":"core/notice/access-ios.html","title":"IOS","keywords":"","body":"iOS Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/notice/simple-notice.html":{"url":"core/notice/simple-notice.html","title":"简单支付","keywords":"","body":"公告系统的简单实现 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/notice/best-practice.html":{"url":"core/notice/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 拉取公告流程 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/overview.html":{"url":"core/daq/overview.html","title":"功能介绍","keywords":"","body":"业务介绍 [!TIP|label:Tips] 本节仅介绍数据接入相关内容，数据分析 与 数据服务 请参看其他节。 在公开发行前, 请接入完整的数据, 以提供给运营团队分析。 前期工作 请确认已经在 开发者中心 > 应用配置 完成了开启操作。可参照入门指南中的准备工作。 功能接入 一、软件接口方式 ( API ) 接入特点: 接口对接方式的数据可靠性与价值较高，一般不存在数据重复的情况； 数据通过接口实时传输，满足数据实时性的要求。 二、开放数据库方式 ( RDS ) 接入特点: Relational Database Service, 实现数据的采集汇聚，开放数据库是最直接的一种方式。开放数据库方式可以直接从目标数据库中获取需要的数据，准确性高，实时性也能得到保证，是最直接、便捷的一种方式。 三、系统日志采集方法 ( LOG ) 接入特点: 系统日志采集，如Hadoop的Chukwa、Cloudera的Flume、Facebook的Scribe等。这能满足每秒数百MB的日志数据采集和传输需求，能够从各种日志源上收集日志，存储到一个中央存储系统上，以便于进行集中统计分析处理，日志的“分布式收集，统一处理”特性，提供了一个可扩展的、高容错的方案。 四、基于SDK事件追踪的方法（EVENT-TRACE） 接入特点: 可定制 五、基于底层数据交换的数据直接采集方式 接入特点: 通过获取软件系统的底层数据交换、软件客户端和数据库之间的网络流量包，基于底层IO请求与网络分析等技术，采集目标软件产生的所有数据，将数据转换与重新结构化，输出到新的数据库，供软件系统调用。 可以做到无感接入, 暂不支持 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/access-api.html":{"url":"core/daq/access-api.html","title":"API","keywords":"","body":"access-api Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/access-log.html":{"url":"core/daq/access-log.html","title":"日志文件","keywords":"","body":"access-log Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/access-event-and.html":{"url":"core/daq/access-event-and.html","title":"Android","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 Android登录 页面 接口定义 public void SDKAdjustPoints(Context context, String eventKey, Map parMaps) 参数说明 参数 类型 说明 eventKey 字符串 埋点参数字段，具体的传值请看埋点文档 parMaps 字符串 埋点所需传的参数集合，具体的传值请看埋点文档 [!WARNING|label:注意|iconVisibility:hidden] eventKey 复制埋点文档的以下值 [!WARNING|label:注意|iconVisibility:hidden] parMaps key值复制具体对应埋点需求的附加参数这列，value需要游戏传具体值 示例代码 // 进入游戏的埋点 Map params =new HashMap<>(); params.put(\"uid\",\"1000393\"); params.put(\"serverid\",\"1\"); params.put(\"playerid\",\"d476b70c-961d-47cc-a62c-983b1a4ae2c0\"); MyExternalInterface.getInstance().SDKAdjustPoints(this,\"click_entry_game\",params); Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/access-event-ios.html":{"url":"core/daq/access-event-ios.html","title":"IOS","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 IOS登录 页面 接口定义 在 - (void)applicationDidBecomeActive:(UIApplication *)application 方法中调用上报激活事件 参数说明 参数 类型 说明 eventName 字符串 事件名（埋点文档中对应的事件名，⚠️不能自定义） dic 字符串 包含携带参数的对象，具体各个点需要携带的参数请参考埋点文档 示例代码 - (void)applicationDidBecomeActive:(UIApplication *)application { [ROCSdkManager activateApp]; } 其它自定义埋点上报 接口对象参数包含字段说明: [!TIP|iconVisibility:hidden|labelVisibility:hidden] 接口对象参数包含字段说明 调用示例如下: [ROCSdkManager azlEventName:⚠️#事件名#⚠️ callbackParameter:nil]; [ROCSdkManager azlEventName:⚠️#事件名#⚠️ callbackParameter:@{@\"uid\":@\"xxx\", @\"serverid\":@\"xxx\", @\"playerid\":@\"xxx\", }]; Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/access-rds.html":{"url":"core/daq/access-rds.html","title":"数据库传输","keywords":"","body":"access-rds Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/simple-daq.html":{"url":"core/daq/simple-daq.html","title":"简单支付","keywords":"","body":"简单认证 如果你仅仅只需要接入这一种登录方式，确认不使用 RDS 其他云服务，可以看这里的文档。请注意，如果刚开始只选择接入「 登录」，后面又需要使用其他云服务的话，后期可能有一定的升级成本。 使用原来 SDK v1.x 版本的开发者，也可以参考这里的说明来完成 SDK 的升级。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"core/daq/best-practice.html":{"url":"core/daq/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 登录流程 玩家在登录时，操作的步骤越少，路径越短，则转化率越高。建议使用相对简短的引导，保留必要的步骤，让玩家能快速进入游戏。 登录界面 为玩家提供 登录按钮 ，按照登录设计指南绘制，并参考功能介绍 中单个登录与多个登录的展现方式。 Checklist 向玩家提供登录功能前，开发者需要测试登录流程是否正常完成，检查以下事项： 游戏是否达到 SDK 环境要求。 开发者是否了解 SDK 中两种 登录方式，并选择了适合游戏的一种。参考接入 登录。 是否在 开发者后台填写了 Android 平台或 iOS 平台相关配置。参考配置签名证书和格式要求。 测试用户是否具备相关权限。参考测试用户管理。 在未安装 客户端的设备上打开游戏，是否能以 WebView 方式完成登录流程，是否能获取玩家授权的基本信息。 在安装了最新版 客户端的设备上打开游戏，是否能拉起 客户端完成登录流程，是否能获取玩家授权的基本信息。 登录授权完成后，退出游戏再次进入，是否可以静默登录。 登录授权未完成就退出游戏，或者点了取消，再次进入游戏，是否能重新开始登录流程。 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/gift/overview.html":{"url":"modules/gift/overview.html","title":"功能介绍","keywords":"","body":"礼包功能介绍 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/gift/best-practice.html":{"url":"modules/gift/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 礼包功能流程 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/analytics/overview.html":{"url":"modules/analytics/overview.html","title":"功能介绍","keywords":"","body":"数据功能介绍 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/analytics/best-practice.html":{"url":"modules/analytics/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 数据分析流程 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/1.html":{"url":"modules/other/1.html","title":"游戏好友","keywords":"","body":"即将推出 1 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/2.html":{"url":"modules/other/2.html","title":"成就系统","keywords":"","body":"即将推出 2 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/3.html":{"url":"modules/other/3.html","title":"实时语音","keywords":"","body":"即将推出 3 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/4.html":{"url":"modules/other/4.html","title":"即时通信","keywords":"","body":"即将推出 4 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/5.html":{"url":"modules/other/5.html","title":"推送通知","keywords":"","body":"即将推出 5 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/6.html":{"url":"modules/other/6.html","title":"数据存储","keywords":"","body":"即将推出 6 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"faq/faq.html":{"url":"faq/faq.html","title":"接入问题","keywords":"","body":"常见问题 接入问题 ... Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"faq/faq-ios.html":{"url":"faq/faq-ios.html","title":"使用问题","keywords":"","body":"常见问题 使用问题 ... Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"faq/faq-and.html":{"url":"faq/faq-and.html","title":"广告相关问题","keywords":"","body":"常见问题 ... Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/7.html":{"url":"modules/other/7.html","title":"排行榜","keywords":"","body":"即将推出 7 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/8.html":{"url":"modules/other/8.html","title":"云存档","keywords":"","body":"即将推出 8 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "},"modules/other/9.html":{"url":"modules/other/9.html","title":"防沉迷","keywords":"","body":"即将推出 9 Copyright © ROC Games 2022            此页面修订于： 2022-11-18 12:22:20 "}}